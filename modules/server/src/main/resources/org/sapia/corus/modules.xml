<?xml version="1.0" encoding="UTF-8"?>
<beans 
      xmlns="http://www.springframework.org/schema/beans"
      xmlns:p="http://www.springframework.org/schema/p"
      xmlns:context="http://www.springframework.org/schema/context"

      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-2.5.xsd 
          http://www.springframework.org/schema/context 
          http://www.springframework.org/schema/context/spring-context.xsd">
          
  <!-- Register Annotation-based Post Processing Beans -->
  <context:annotation-config />
  <bean name="extModulePostProcessor" class="org.sapia.corus.core.ModulePostProcessor" />


  <bean name="org.sapia.corus.client.services.audit.Auditor"
        class="org.sapia.corus.audit.AuditorImpl" 
        scope="singleton" 
        autowire="autodetect">
  </bean> 
  
  <!-- ============ CLUSTER ============ -->

  <bean name="org.sapia.corus.client.services.cluster.ClusterManager"
        class="org.sapia.corus.cluster.ClusterManagerImpl" 
        scope="singleton" 
        autowire="autodetect">
    <property name="lenient" value="${corus.server.cluster.lenient-enabled}" />
  </bean> 

  <!-- ============ JNDI ============ -->

  <bean name="org.sapia.corus.client.services.naming.JndiModule" 
        class="org.sapia.corus.naming.JndiModuleImpl" 
        scope="singleton"
        autowire="autodetect">
  </bean> 
  
  <!-- ============ ARTIFACT MANAGER ============ -->

  <bean class="org.sapia.corus.deployer.artifact.FileArtifactProvider" 
        scope="singleton"
        autowire="autodetect">
  </bean>
  
  <bean class="org.sapia.corus.deployer.artifact.S3ArtifactProvider" 
        scope="singleton"
        autowire="autodetect">
  </bean>
  
  <bean name="org.sapia.corus.client.services.artifact.ArtifactManager" 
        class="org.sapia.corus.deployer.artifact.ArtifactManagerImpl" 
        scope="singleton" 
        autowire="autodetect">
  </bean>
  
  <!-- ============= DOCKER ============= -->

  <bean name="org.sapia.corus.docker.DockerFacade" 
        scope="singleton" 
        class="org.sapia.corus.docker.SpotifyDockerFacade"
        autowire="constructor">
    <property name="enabled"             value="${corus.server.docker.enabled}" />
    <property name="email"               value="${corus.server.docker.client.email}" />
    <property name="username"            value="${corus.server.docker.client.username}" />
    <property name="password"            value="${corus.server.docker.client.password}" />
    <property name="serverAddress" 		 value="${corus.server.docker.registry.address}" />
    <property name="registrySyncEnabled" value="${corus.server.docker.registry.sync-enabled}" />          
    <property name="autoRemoveEnabled"   value="${corus.server.docker.image-auto-remove-enabled}" />    
    <property name="daemonUrl"           value="${corus.server.docker.daemon.url}" />
  </bean>

  <bean name="org.sapia.corus.ext.hook.docker.DockerPostDeploymentProcessor" 
        scope="singleton" 
        class="org.sapia.corus.ext.hook.docker.DockerPostDeploymentProcessor"
        autowire="constructor">
  </bean>
  
    <bean name="org.sapia.corus.ext.hook.docker.DockerImageDeploymentReplicationProcessor" 
        scope="singleton" 
        class="org.sapia.corus.ext.hook.docker.DockerImageDeploymentReplicationProcessor"
        autowire="constructor">
  </bean>

  <bean name="org.sapia.corus.ext.hook.docker.DockerProcessKillHook" 
        scope="singleton" 
        class="org.sapia.corus.ext.hook.docker.DockerProcessKillHook">
  </bean>
  
  <bean name="org.sapia.corus.ext.hook.docker.DockerProcessStartHook" 
        scope="singleton" 
        class="org.sapia.corus.ext.hook.docker.DockerProcessStartHook">
  </bean>
  
  <bean name="org.sapia.corus.client.services.docker.DockerManager"
        scope="singleton"
        class="org.sapia.corus.docker.DockerManagerImpl">
  </bean>
  

  <!-- ============ DEPLOYER ============ -->
  
  <bean name="org.sapia.corus.deployer.processor.DeploymentProcessorManager" 
        scope="singleton" 
        class="org.sapia.corus.deployer.processor.DeploymentProcessorManagerImpl">
  </bean>

  <bean name="deployer.configuration" 
        scope="singleton" 
        class="org.sapia.corus.deployer.DeployerConfigurationImpl">
    <property name="tempDir"    value="${corus.server.tmp.dir}" />
    <property name="deployDir"  value="${corus.server.deploy.dir}" />
    <property name="uploadDir"  value="${corus.server.uploads.dir}" />    
    <property name="scriptDir"  value="${corus.server.scripts.dir}" />
    <property name="repoDir"    value="${corus.server.repo.dir}" />
  </bean>
  
  <bean name="org.sapia.corus.deployer.archiver.DistributionArchiver"
        scope="singleton" 
        class="org.sapia.corus.deployer.archiver.DistributionArchiverImpl" 
        autowire="autodetect" />
  
  <bean name="deployer.shellScriptManager" 
        class="org.sapia.corus.deployer.ShellScriptManagerImpl" 
        scope="singleton"
        autowire="autodetect" />
        
  <bean name="deployer.fileManager" 
        class="org.sapia.corus.deployer.FileManagerImpl" 
        scope="singleton"
        autowire="autodetect" />        
  
  <bean name="fileDeploymentHandler"         class="org.sapia.corus.deployer.handler.FileDeploymentHandler" />
  <bean name="distributionDeploymentHandler" class="org.sapia.corus.deployer.handler.DistributionDeploymentHandler" />
  <bean name="scriptDeploymentHandler"       class="org.sapia.corus.deployer.handler.ScriptDeploymentHandler" />
  <bean name="dockerImageDeploymentHandler"  class="org.sapia.corus.deployer.handler.DockerImageDeploymentHandler" />
  
  <bean name="org.sapia.corus.client.services.deployer.Deployer" 
        class="org.sapia.corus.deployer.DeployerImpl" 
        scope="singleton" 
        autowire="autodetect">
        
    <property name="flagDistAbsenceAsError" value="${corus.server.deploy.diag.dist.absence.error}" />    
    
    <property name="deploymentHandlers">
        <list>
            <ref bean="fileDeploymentHandler" />
            <ref bean="distributionDeploymentHandler" />
            <ref bean="scriptDeploymentHandler" />
            <ref bean="dockerImageDeploymentHandler" />
        </list>
    </property>
  </bean>

  <!-- ============ PORTS ============ -->
  
  <bean name="org.sapia.corus.client.services.port.PortManager" 
        class="org.sapia.corus.port.PortManagerImpl" 
        scope="singleton"
        autowire="autodetect">
  </bean>
  
  <!-- ============== NUMA ============== -->
  
  <bean name="org.sapia.corus.numa.NumaModule" 
        scope="singleton" 
        class="org.sapia.corus.numa.NumaModuleImpl">
      <constructor-arg ref="org.sapia.corus.client.services.configurator.Configurator"/>
      <constructor-arg ref="org.sapia.corus.client.services.processor.Processor"/>
      <constructor-arg ref="org.sapia.corus.client.services.os.OsModule"/>
      <property name="enabled"              value="${corus.server.numa.enabled}" />
      <property name="bindingCpu"           value="${corus.server.numa.bind.cpu}" />
      <property name="bindingMemory"        value="${corus.server.numa.bind.memory}" />
      <property name="firstNumaNodeId"      value="${corus.server.numa.first.node.id}" />
      <property name="numaNodeCount"        value="${corus.server.numa.node.count}" />
      <property name="autoDetectionEnabled" value="${corus.server.numa.auto-detection.enabled}" />
  </bean>
  
  <!-- ============ PROCESSOR ============ -->
  
  <bean 
    name="org.sapia.corus.processor.hook.ProcessHookManager"
    scope="singleton" 
    class="org.sapia.corus.processor.hook.ProcessHookManagerImpl">  
  </bean>
  
  <bean 
    name="org.sapia.corus.processor.hook.DefaultProcessStartHook"
    scope="singleton" 
    class="org.sapia.corus.processor.hook.DefaultProcessStartHook">
  </bean>

  <bean 
    name="org.sapia.corus.processor.hook.DefaultProcessKillHook"
    scope="singleton" 
    class="org.sapia.corus.processor.hook.DefaultProcessKillHook">
  </bean>

  <bean 
    name="processor.configuration"
    scope="singleton" 
    class="org.sapia.corus.processor.ProcessorConfigurationImpl">
    <property name="processCheckInterval" value="${corus.process.check-interval}" />
    <property name="processDiagnosticCheckInterval" value="${corus.process.check-diagnostic-interval}" />
    <property name="killInterval"         value="${corus.process.kill-interval}" />
    <property name="startInterval"        value="${corus.process.start-interval}" />
    <property name="restartInterval"      value="${corus.process.restart-interval}" />
    <property name="processTimeout"       value="${corus.process.timeout}" />
    <property name="autoRestart"          value="${corus.process.auto-restart}" />
    <property name="bootExecEnabled"      value="${corus.process.start-at-boot.enabled}" />
    <property name="processPublishingDiagnosticMaxAttempts" value="${corus.process.pub.diagnostic.max-attempts}" />
    <property name="processPublishingDiagnosticInterval"    value="${corus.process.pub.diagnostic.interval}" />
  </bean>

  <bean name="org.sapia.corus.client.services.processor.Processor" 
        class="org.sapia.corus.processor.ProcessorImpl" 
        scope="singleton" 
        autowire="autodetect"/>

  <!-- ============ CRON ============ -->

  <bean name="org.sapia.corus.client.services.cron.CronModule" 
        class="org.sapia.corus.cron.CronModuleImpl" 
        scope="singleton"
        autowire="autodetect">
  </bean> 

  <!-- ============ SECURITY ============ -->

  <bean name="org.sapia.corus.client.services.security.SecurityModule" 
        class="org.sapia.corus.security.SecurityModuleImpl" 
        scope="singleton"
        autowire="autodetect">
    <property name="allowedHostPatterns"   value="${corus.server.security.hostPattern.allow}" />
    <property name="deniedHostPatterns"    value="${corus.server.security.hostPattern.deny}" />
  </bean>
  
  <bean name="org.sapia.corus.client.services.security.ApplicationKeyManager"
        class="org.sapia.corus.security.ApplicationKeyManagerImpl"
        scope="singleton"
        autowire="autodetect">
  </bean>

  <!-- ============ REPO ============ -->
  
  <bean name="repository.configuration" class="org.sapia.corus.repository.RepositoryConfigurationImpl">
    <property name="maxConcurrentDeploymentRequests"      value="${corus.server.repository.max.concurrent-deployments}" />
    <property name="repoFileTtlMinutes"                   value="${corus.server.repository.files.ttl}" />
    <property name="repoFileCheckIntervalSeconds"         value="${corus.server.repository.files.check-interval}" />
    <property name="distributionDiscoveryMaxAttempts"     value="${corus.server.repository.dist.disco.max-attempts}" />    
    <property name="distributionDiscoveryIntervalSeconds" value="${corus.server.repository.dist.disco.interval}" />
    <property name="pushTagsEnabled"                      value="${corus.server.repository.tags.push.enabled}" />
    <property name="pullTagsEnabled"                      value="${corus.server.repository.tags.pull.enabled}" />    
    <property name="pushPropertiesEnabled"                value="${corus.server.repository.properties.push.enabled}" />    
    <property name="pullPropertiesEnabled"                value="${corus.server.repository.properties.pull.enabled}" />
    <property name="pushFilesEnabled"                     value="${corus.server.repository.uploads.push.enabled}" />    
    <property name="pullFilesEnabled"                     value="${corus.server.repository.uploads.pull.enabled}" />    
    <property name="pushScriptsEnabled"                   value="${corus.server.repository.scripts.push.enabled}" />    
    <property name="pullScriptsEnabled"                   value="${corus.server.repository.scripts.pull.enabled}" />    
    <property name="pushPortRangesEnabled"                value="${corus.server.repository.port-ranges.push.enabled}" />    
    <property name="pullPortRangesEnabled"                value="${corus.server.repository.port-ranges.pull.enabled}" />    
    <property name="pushSecurityConfigEnabled"            value="${corus.server.repository.security.push.enabled}" />    
    <property name="pullSecurityConfigEnabled"            value="${corus.server.repository.security.pull.enabled}" />  
    <property name="bootExecEnabled"                      value="${corus.process.start-at-boot.enabled}" />
    <property name="bootstrapDelay"                       value="${corus.server.repository.dist.disco.delay}" />
    
    <property name="artifactDeploymentRequestActivityDelaySeconds"   value="${corus.server.repository.deploy.request.delay}" />
    <property name="artifactDeploymentRequestActivityTimeoutSeconds" value="${corus.server.repository.deploy.request.timeout}" />
    
    <property name="repoServerExecProcessEnabled"  value="${corus.server.repository.server.exec-enabled}" />
    <property name="repoServerSyncEnabled"         value="${corus.server.repository.server.synchronization.enabled}" />
    <property name="repoClientDeployScriptEnabled" value="${corus.server.repository.client.deploy-scripts-enabled}" />
    
    <property name="checkStateEnabled"            value="${corus.server.repository.state-check.enabled}" />
    <property name="checkStateIntervalSeconds"    value="${corus.server.repository.state-check.interval}" />
    <property name="checkStateRandomHostsEnabled" value="${corus.server.repository.state-check.max-random-hosts.enabled}" />
    <property name="checkStateMaxRandomHosts"     value="${corus.server.repository.state-check.max-random-hosts} " />
    <property name="checkStateAutomatic"          value="${corus.server.repository.state-check.automatic}" />
  </bean>

  <bean name="org.sapia.corus.client.services.repository.Repository" 
        class="org.sapia.corus.repository.RepositoryImpl" 
        scope="singleton"
        autowire="autodetect">
  </bean>

  <!-- ============ ALERTS ============ -->

  <bean name="org.sapia.corus.client.services.alert.AlertManager" 
        class="org.sapia.corus.alert.AlertManagerImpl" 
        scope="singleton"
        autowire="autodetect">
    <property name="smtpHost"   	   value="${corus.server.alert.smtp.host}" />
    <property name="smtpPort"        value="${corus.server.alert.smtp.port}" />
    <property name="smtpPassword"    value="${corus.server.alert.smtp.password}" />
    <property name="fromEmail"       value="${corus.server.alert.sender}" />    
    <property name="recipientEmails" value="${corus.server.alert.recipients}" />
    <property name="enabled"   	     value="${corus.server.alert.enabled}" />
    <property name="alertLevel"      value="${corus.server.alert.level}" />
  </bean> 

  <!-- ============ PUBLISHER ============ -->

  <bean name="org.sapia.corus.publisher.ProcessPublishingProvider.AWS"
      class="org.sapia.corus.ext.pub.aws.AwsElbPublishingProvider"
      scope="singleton"
      autowire="autodetect">
  </bean> 

  <!-- Consul -->
  <bean name="org.sapia.corus.publisher.ProcessPublishingProvider.CONSUL"
      class="org.sapia.corus.ext.pub.consul.ConsulPublisher"
      scope="singleton"
      autowire="autodetect">
    <property name="enabled"                value="${corus.server.pub.consul.enabled}" />
    <property name="agentUrl"               value="${corus.server.pub.consul.agent-url}" />
    <property name="publishIntervalSeconds" value="${corus.server.pub.consul.interval}" />
    <property name="publishTtlSeconds"      value="${corus.server.pub.consul.ttl}" />
  </bean> 

  <bean name="orgs.sapia.co"
      class="org.sapia.corus.publisher.ProcessPublisherImpl"
      scope="singleton"
      autowire="autodetect">
  </bean> 
  
  <!-- ============ DIAGNOSTICS ============ -->

  <bean name="org.sapia.corus.client.services.diagnostic.DiagnosticModule"
      class="org.sapia.corus.diagnostic.DiagnosticModuleImpl"
      scope="singleton"
      autowire="autodetect">
    <property name="processStartupGracePeriodDuration" value="${corus.server.diagnostic.grace-period.duration}" />
  </bean>   

  <!-- ============ AWS ============ -->
   
     
  <bean name="org.sapia.corus.aws.AwsConfiguration"
      class="org.sapia.corus.aws.AwsConfigBean"
      scope="singleton"
      autowire="autodetect">
    <property name="awsEnabled" value="${corus.server.aws.enabled}" />
  </bean> 
   
  <bean name="org.sapia.corus.aws.cloudwatch.AwsCloudWatchBean"
  		class="org.sapia.corus.aws.cloudwatch.AwsCloudWatchBean"
  		scope="singleton"
  		autowire="autodetect">
  	<property name="region" value="${corus.server.aws.cloudwatch.region}" />
    <property name="enabled" value="${corus.server.aws.cloudwatch.enabled}" />
  </bean>
  
</beans>

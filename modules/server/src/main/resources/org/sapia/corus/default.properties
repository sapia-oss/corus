##### Temp dir ############################################
#
# Directory where distributions are
# uploaded.
#

corus.server.tmp.dir=${corus.home}/tmp

##### Deploy dir ##########################################
#
# Directory where distributions are
# extracted, and where processes are
# executed. 
#

corus.server.deploy.dir=${corus.home}/deploy

##### Repo dir ############################################
#
# Directory where zipped distributions are
# kept.
#

corus.server.repo.dir=${corus.home}/files/repo

##### Upload dir ##########################################
#
# Directory where arbitrary artifacts are
# uploaded.
#

corus.server.uploads.dir=${corus.home}/files/uploads

##### Script dir ##########################################
#
# Directory where native shell scripts are
# uploaded.
#

corus.server.scripts.dir=${corus.home}/files/scripts

##### DB dir ##############################################
#
# Used to keep information kept by
# Corus server instances between
# process restarts. 
#

corus.server.db.dir=${corus.home}/db


##### Distribution diagnostics ############################
#
# Flag that indicates if a Corus instance without
# any distribution to it should be considered in error 
#
corus.server.deploy.diag.dist.absence.error=false

##### Process auto-restart  ###############################
#
# If true, process auto-restart by Corus
# will be enabled. Otherwise, it will be 
# disabled (defaults to true). 
#

corus.process.auto-restart=true

##### Process timeout #####################################
#
# Delay after which processes that 
# have not polled their Corus server 
# are considered "timed out".
#
# Delay is in seconds.
#

corus.process.timeout=25

##### Process check interval ##############################
#
# Interval at which the Corus server 
# checks for timed out processes.
#
# Interval is in seconds.
#

corus.process.check-interval=15

# as part of the process check: interval at which process diagnostic should be
# perform (will use the internal diagnostic API to perform service health check).
corus.process.check-diagnostic-interval=30

##### Process kill interval ###############################
#
# Interval at which the Corus server
# checks for timed out processes.
#
# Interval is in seconds.
#

corus.process.kill-interval=15

##### Process start interval ##############################
#
# Amount of time to wait for between
# process startups
#
# Interval is in seconds.
#

corus.process.start-interval=15

##### Process restart interval ############################
#
# Amount of time a process must have 
# been running for before it crashed 
# and in order for an automatic restart 
# to be authorized.
#
# Interval is in seconds.
#

corus.process.restart-interval=120

##### Process boot startup ################################
#
# Indicates if a processes should be started
# automatically at Corus server boot time 
# (provided these processes have an execution
# configuration that is flagged as startable
# on boot).
#
# The functionality is enabled by default.
# If the Corus node is configured as a repo, it
# is recommended to disable this flag. 
#
corus.process.start-at-boot.enabled=true

##### Process publishing ##################################
#
# Maximum number of pre-publish diagnostic attempts
# until a final diagnostic is reached (if value <= 0,
# indicates that there's no maximum, and diagnostic 
# acquisition will be performed until a final diagnostic
# is reached.
corus.process.pub.diagnostic.max-attempts=-1
#
# Number of seconds between process pre-publish
# diagnostic attempts
corus.process.pub.diagnostic.interval=5

##### Process configuration update #######################
#
# Indicates if a processes should be notified of any process
# configuration that occured on the Corus server. When enabled
# Corus will publish configuration update events to all active
# managed processes. This functionality is activated by default.
#
# It is up to each process to take action upon reception of
# such a configuration change event. See Corus Interop specification
# for more details.
#

corus.server.process.config-update.enabled=true

##### Host filtering ######################################
#
# Used to authorize given hosts to connect
# to the Corus server. Must be given as
# comma-delimited list of host patterns. If
# ommitted, any host can connect to the 
# server.
#
# Specified allow hosts are given access
# and deny hosts are forbidden. By default
# no filtering is applied and all requests
# are accepted. The reserved word 'localhost'
# can be used to specify the current host.
#

corus.server.security.hostPattern.allow=
corus.server.security.hostPattern.deny=

##### Alerts ##############################################
#
# Used to determine the SMTP configuration for
# sending alerts, as well as the recipients
corus.server.alert.enabled=false
corus.server.alert.smtp.host=
corus.server.alert.smtp.port=
corus.server.alert.smtp.password=
corus.server.alert.recipients=
corus.server.alert.sender=corus-no-reply@localhost
corus.server.alert.level=warning

##### Diagnostics #########################################
#
corus.server.diagnostic.grace-period.duration=240

##### Repository ##########################################
#
# Determines what the type of repository node that
# this Corus instance will be. Can be one of the 
# following (defaults to none):
#
# - none: means that this Corus node will be neither 
#         a repository client, nor a repository server.
#         (i.e.: it will not be involved in repository
#         operations at all). This in fact disables any 
#         repository functionality.
#
# - client: means that this Corus node will act as a
#         repository client.
# 
# - server: means that this Corus node will act as a
#         repository server. 
corus.server.repository.node.type=none
#
# Determines if process execution should be enabled if this Corus
# server is a repository node (defaults to false).
#
corus.server.repository.server.exec-enabled=false
#
# Determines if deployment scripts should be automatically executed if
# this node is a repo client (defaults to true).
#
corus.server.repository.client.deploy-scripts-enabled=true
#
# The grace period (in seconds) given in order to accommodate 
# new deployment  requests from clients. After that given amount of 
# time has passed without new incoming deployment requests,
# the grace period is considered over and deployment activity starts.
#
# This allows chaining up requests so so that the deployment is 
# done in one shot across multiple nodes at a time. The grace period 
# is reset every time a new request comes in, up until a given timeout 
# (set by the next property). The default value for this property is 5 seconds. 
# 
corus.server.repository.deploy.request.delay=5
#
#
# The maximum of time to wait for (in seconds) after the last incoming 
# deployment request: after that amount of time, regardless if there 
# have been new deployment requests coming in, deployment proceeds.
#
corus.server.repository.deploy.request.timeout=15
#
# Specifies the maximum number of concurrent deployment 
# requests that a repository should process (any more are queued
# up - defaults to 5).
#
corus.server.repository.max.concurrent-deployments=5
#
# The time-to-live (in minutes) of files that are temporarily cached locally
# by the repository. Such files are automatically deleted beyond that TTL
# (defaults to 60 minutes).
corus.server.repository.files.ttl=60
#
# The interval (in seconds) at which file (distributions, images, etc.) cached
# locally by the repository should be checked for deletion (defaults to 120 seconds).
corus.server.repository.files.check-interval=120
#
# Specifies a random delay that will be observed by a repo client
# as startup, before it starts attempting to discover repo server.
# The delay corresponds to a time range, within which a random time
# will be picked (defaults to a time between 5 and 10 seconds).
#
corus.server.repository.dist.disco.delay=5s-10s

# The number of times a client repo node should try to discover
# potential server repos at startup and pull their distributions
# (defaults to 4).
# 
corus.server.repository.dist.disco.max-attempts=4
#
# The time interval (in seconds) to wait for in between 
# repo server discovery attempts (30 seconds by default).
#
corus.server.repository.dist.disco.interval=30
#
# Enables (true) or disables (false) the push of tags by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
# Enables (true) or disables (false) the push of tags by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
corus.server.repository.tags.push.enabled=true
#
# Enables (true) or disables (false) the pull of tags by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
corus.server.repository.tags.pull.enabled=true
#
# Enables (true) or disables (false) the push of properties by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
corus.server.repository.properties.push.enabled=true
#
# Enables (true) or disables (false) the pull of properties by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
corus.server.repository.properties.pull.enabled=true
#
# Enables (true) or disables (false) the push of file uploads by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
corus.server.repository.uploads.push.enabled=true
#
# Enables (true) or disables (false) the pull of file uploads by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
corus.server.repository.uploads.pull.enabled=true
#
# Enables (true) or disables (false) the push of shell scripts by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
corus.server.repository.scripts.push.enabled=true
#
# Enables (true) or disables (false) the pull of shell scripts by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
corus.server.repository.scripts.pull.enabled=true
#
# Enables (true) or disables (false) the push of port ranges by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
corus.server.repository.port-ranges.push.enabled=true
#
# Enables (true) or disables (false) the pull of port ranges by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
corus.server.repository.port-ranges.pull.enabled=true
#
# Enables (true) or disables (false) the push of security
# configuration (roles, application keys) by this Corus instance 
# if it is configured as a repo server (defaults to true).
#
corus.server.repository.security.push.enabled=true
#
# Enables (true) or disables (false) the pull of security
# configuration (roles, application keys) by this Corus instance 
# if it is configured as a repo client (defaults to true).
#
corus.server.repository.security.pull.enabled=true
#
# Enables (true) or disables (false) if this node is a repo
# server and should accept being synchronized by repo server peers
# (defaults to false).
#
corus.server.repository.server.synchronization.enabled=false
#
# Enables (true) or disables state checking: an Corus node without
# any distribution deployed to it will check its peers periodically
# for distributions - this is a robustness mechanism that is
# provided to ensure that no node will have nothing deployed to it
# (defaults to false).
corus.server.repository.state-check.enabled=false
#
# The interval (in seconds) at which the state check task should
# run (defaults to 60 seconds).
corus.server.repository.state-check.interval=60
# 
# The maximum number of hosts to probe randomly when no repo 
# server nodes are found (defaults to 5). This will be taken into
# account only when the next property is set to true (it is false
# by default).
corus.server.repository.state-check.max-random-hosts=5
#
# Indicates if looking up non-repo server peers should be 
# enabled (defaults to false).
corus.server.repository.state-check.max-random-hosts.enabled=false
#
# Indicates if state checking should be determined automatically.
# If so, the following logic is applied:
#
# a) If the Corus node is a repo server, looking up random hosts will
#    be disabled (to insure that a repo server does not copy state from
#    repo clients.
#
# b) If the Corus node is a repo client, random hosts will be used if
#    no repo server is found.
#
# c) If the Corus node is neither a repo client or server, random hosts will
#    be used if no repo server is found.
#
corus.server.repository.state-check.automatic=true
#
##### HTTP Security #######################################
#
# SSL key password
#
corus.server.ssl.key.password=default
#
# SSL keystore password
#
corus.server.ssl.keystore.password=default
#
# Location of the SSL keystore file
#   
corus.server.ssl.keystore.file=${user.home}/.keystore
#
# SSL PORT (if set to 0, will be set to corus_non_ssl_port + 443)
#
corus.server.ssl.port=0
#
# Enables/disables SSL (defaults to false)
#
corus.server.ssl.enabled=false
#
# Enforces use of SSL for REST API. 
#
corus.server.api.ssl.enforced=false
#
# Hides and denies access to files corresponding to given patterns from console.
#
corus.server.file.hide.patterns=${corus.home}/logs/*audit*log.*,${corus.home}/db/**,${corus.home}/config/*.properties,${corus.home}/config/files/uploads/*.properties,${corus.home}/deploy/**/.corus-process.hidden.properties

##### Consul ##############################################
#
# Enables/Disables publishing this node's info to Consul.
# Defaults to false.
#
corus.server.pub.consul.enabled=false
#
# Base URL of the Consul agent
#
corus.server.pub.consul.agent-url=http://localhost:8500
#
# The interval (in seconds) at which publishing to Consul should be done. 
# Defaults to 30.
#
corus.server.pub.consul.interval=30
#
# The TTL (in seconds) of the service definition published in Consul 
# for this Corus node. Should be set to a value greater than the publishing
# interval. Defaults to 45.
#
corus.server.pub.consul.ttl=45

##### AWS #################################################
#
# Enables/disables AWS integration
#
corus.server.aws.enabled=false
#
# Indicates if sending events to AWS CloudWatch is enabled
# or not (defaults to false). Note that the previous
# property (corus.server.aws.enabled) must also be true
# if sending events to CloudWatch is desired.
#
corus.server.aws.cloudwatch.enabled=false
#
# Indicates which region to use for sending CloudWatch events
# (leave value to empty string is the region of the EC2 
# instance in which Corus runs is to be used).
#
#corus.server.aws.cloudwatch.region=



##### NUMA ##############################################
#
# Enables/disables NUMA integration
corus.server.numa.enabled=false

# Enables/disables auto detection of NUMA node count
corus.server.numa.auto-detection.enabled=true

# Enables/disables binding of processes to CPUs of numa node
corus.server.numa.bind.cpu=true

# Enables/disables binding of processes to memory slot of numa node
corus.server.numa.bind.memory=true

# Defines the fist numa node to use for process binding
corus.server.numa.first.node.id=0

# Defines the total number of numa node available on the current server (overrides the auto-detection)
corus.server.numa.node.count=0


##### Docker ##############################################
#
# Enables/disables Docker integration
corus.server.docker.enabled=false

# Enables/disables synchronization with the Docker registry
corus.server.docker.registry.sync-enabled=true

# Enables/disables auto-removal of images upon undeployment
# of Docker-enabled distributions
corus.server.docker.image-auto-remove-enabled=true

# Email to use for authentication against the Docker registry
corus.server.docker.client.email=empty-docker-client-email

# Username to use for authentication against the Docker registry
corus.server.docker.client.username=empty-docker-client-username

# Password to use for authentication against the Docker registry
corus.server.docker.client.password=empty-docker-client-password

# Address of the Docker registry to use, down to the version
corus.server.docker.registry.address=https://hub.docker.com/v1/

# Address of the Docker daemon
corus.server.docker.daemon.url=unix:///var/run/docker.sock

# Path to the Docker certificates
corus.server.docker.certificates.path=

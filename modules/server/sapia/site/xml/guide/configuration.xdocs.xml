<sapia:page cssPath="../css/sapia.css" title="The Corus Guide - Configuration" xmlns:sapia="http://www.sapia-oss.org/2003/XSL/Transform">

  <head>
    <link rel="stylesheet" href="css/corus.css" type="text/css"/>
  </head>

  <sapia:vmenu>
    <sapia:vsection name="Corus Home" href="../home.html"/>
  	<sapia:vsection name="REST API" href="../rest.html"/>
    <sapia:vsection name="Interop Spec" href="../CorusInterop.pdf"/>
    <sapia:vsection name="Corus vs Chef" href="../corus_vs_chef.html"/>

  </sapia:vmenu>

  <sapia:sect1 title="Configuration">
    <sapia:section>
      <sapia:path name="home" href="../../../home.html" />
      <sapia:path name="projects" />
      <sapia:path name="corus" href="../home.html" />
      <sapia:path name="learning" href="../learning.html" />
      <sapia:path name="guide" href="home.html" />
      <sapia:path name="configuration"/>
    </sapia:section>

    <toc/>

    <sapia:sect-desc>
      <p>
        In order to be able to tailor a Corus installation to specific needs, one needs understanding the file layout, and the main configuration 
        elements.
      </p>
    </sapia:sect-desc>
    
    <sapia:toc/>
   
    <sapia:sect2 title="File System Layout" alias="file_system_layout">
      <sapia:sect-desc>
      	<p>
        	When deploying a distribution to Corus, it is unzipped on the server-side, according to a predefined layout.
        </p>
      </sapia:sect-desc>
      <sapia:sect3 title="Corus Home" alias="corus_home">
        <p>
          After installation, your <tt>CORUS_HOME</tt> environment variable should have been set, and point to the directory where you've extracted the Corus package. Under <tt>CORUS_HOME</tt>, other directories will appear (or be created when Corus first starts up). The directories are as follows:
          <ul>
            <li><tt><b>config</b></tt>: holds the Corus configuration files (at least one: <tt>corus.properties</tt>.</li>
            <li><tt><b>bin</b></tt>: holds the Corus executables.</li>
            <li><tt><b>db</b></tt>: holds the directory where Corus' database state is kept (on a per-Corus instance basis).</li>
            <li><tt><b>deploy</b></tt>: holds the directory deployed distributions are extracted (on a per-Corus instance basis).</li>
            <li><tt><b>files</b></tt>: holds the directory deployed files are extracted (on a per-Corus instance basis).</li>
            <li><tt><b>logs</b></tt>: holds the directory where Corus' logs are kept (on a per-Corus instance basis).</li>
          </ul>
        </p>
        <p>What is meant by "on a per-Corus instance basis" is explained in the next section.</p>
      </sapia:sect3>
      <sapia:sect3 title="Instance Directory" alias="instance_directory">
        <p>
          You can start multiple Corus instances on the same hosts if you please, as part of the same domain, or as part of different ones. In any case, each server instance will have its own working directory under each per-instance directory (see the <a href="#corus_home">previous section</a> for what these directories are). The working directory of a given server instance is identified by the following pattern:
        </p>
        <sapia:code>port_&lt;port_number&gt;</sapia:code>
        <p>
          For example, a Corus server instance listening on port 33000 (Corus' default port) would have <tt>port_33000</tt> as its working directory. 
        </p>
        <p>
          To be clearer, for a Corus instance running on port 33000 would have the following directory layout under <tt>CORUS_HOME</tt>:
        </p>
        <sapia:code>config/
bin/
db/
  port_33000/
deploy/
  port_33000/
files/
  port_33000/
logs/
  port_33000/</sapia:code>
      </sapia:sect3>
      <sapia:sect3 title="Corus Distribution Directories">
        <p>
          As was mentioned previously, when a distribution is deployed into Corus, it is extracted under the server's deploy directory. More precisely, Corus creates the following structure under the deployment directory:
        </p>
        <sapia:code><![CDATA[<distribution_name>
  /<version_number>
    /common
    /processes]]></sapia:code>
        <p>
          The actual distribution archive is extracted under the common directory. When executing a process of that distribution, Corus internally assigns an identifier to that process; it then creates a directory under the processes directory that is given the process identifier as a name. For example, if the process identifier is 1234567, then the 1234567 directory is created under the processes directory.
        </p>
        <p>
          As is described in the <a href="corus_system_properties">Corus System Properties</a> section further below, processes are passed the above information (their <tt>common</tt> and <tt>process</tt> directories) as the following system properties, respectively: <tt>user.dir</tt> and <tt>corus.process.dir</tt>.
        </p>
      </sapia:sect3>
    </sapia:sect2>
    <sapia:sect2 title="Configuration Properties">
    
      <p>A Corus server takes into account two configuration files (actually, Java property files), both in the  <tt>$CORUS_HOME/config</tt> directory. It also supports remotely overriding the properties in these files: in such cases, the properties are kept in Corus' internal database - see the <a href="#remote_property_update">Remote Property Update</a> subsection further below on that topic). These files are:</p>
      
      <ul>
        <li><tt><b>$CORUS_HOME/config/corus.properties</b></tt>: holds the server's configuration parameters.</li>
        <li><tt><b>$CORUS_HOME/config/corus_process.properties</b></tt>: holds properties that are passed to each started process.</li>
      </ul>
      <p>
        Both of these files must respect the Java properties format. The  <tt>corus_process.properties</tt> file holds arbitratry properties that are passed to executed processes (through the command-line) as Java system properties. This means a command-line option respecting the format below is created for every property in the file:
      </p>
      <sapia:code><![CDATA[-D<property_name>=<property_value>]]></sapia:code>
      <p>
        For its part, as stated, the file named corus.properties, contains the server's configuration properties.  Note that since Corus rests on Sapia's Ubik distributed computing framework, it also supports all Ubik properties (which is of interest when wanting to use Avis as a node discovery mechanism).
      </p>
      <p>
        Additionally, as a convenience when running multiple Corus instances on the same host, additional files can be specified allowing for configuration that is specific to each instance. Such configuration files must respect the following naming convention to be loaded at startup:
      </p>
      <sapia:code><![CDATA[$CORUS_HOME/config/corus_<port>.properties]]></sapia:code>
      
      <p>Where <tt>&lt;port&gt;</tt> corresponds to the port of the Corus instance to which this file is destined.</p>
      <sapia:note>
        Configuration can also be kept under the HOME directory of the user under which the Corus server is running. See the <a href="">Home Directory Overrides</a> subsection below for more details.
      </sapia:note>
      <p>
        The Corus server's configuration properties are described in the table below. The table indicates if the current property can be remotely updated - the Remote Property Update section, further below, describes the mechanism for storing configuration properties within the Corus server itself. Please see that section for it provides relevant information about where to keep configuration properties.
      </p>
      <sapia:table>
        <sapia:th>Property</sapia:th><sapia:th>Description</sapia:th><sapia:th>Required</sapia:th><sapia:th>Remote Update</sapia:th>
        <tr>
          <td>
          <sapia:code><![CDATA[corus.server.properties.include.01
[corus.server.properties.include.02
corus.server.properties.include.
...]]]></sapia:code>
          </td>
          <td>One ore more property includes, each consisting of the path to one or more property files that should be included and are stored in arbitrary locationiuin the file system (potentiallly in mounted network drives). The files in each path should be separated by either ':' or ';' - without the quotes. This mechanism allows sharing configuration across multiple Corus instances.</td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.domain</tt></td>
          <td>The name of this property corresponds to the name of the domain to which the Corus server  belongs. If the domain is specified at the startup script of the Corus server (through the <tt>-d</tt> option), this property is not taken into account.</td>
          <td>
           No (if not specified in the file, must be given as the -d option at the Corus server startup script).
          </td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.port</tt></td>
          <td>The port on which the Corus server should listen. If the port is specified at the startup script of the Corus server (through the <tt>-p</tt> option), this property is not taken into account.</td>
          <td>No (defaults to 33000)</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.tmp.dir</tt></td>
          <td>The directory where distributions are deployed, pending their extraction under the <tt>deploy</tt> directory.</td>
          <td>No (defaults to (defaults to <tt>$CORUS_HOME/tmp /&lt;instance_dir&gt;</tt>)</td>
          <td>Yes (requires server restart)</td>
        </tr>
        <tr>
          <td><tt>corus.server.deploy.dir</tt></td>
          <td>The directory where distributions are extracted and kept.</td>
          <td>No (defaults to (defaults to <tt>$CORUS_HOME/deploy /&lt;instance_dir&gt;</tt>)</td>
          <td>Yes (requires server restart)</td>
        </tr>
        <tr>
          <td><tt>corus.server.db.dir</tt></td>
          <td>The directory where Corus' internal database stores its files.</td>
          <td>No (defaults to (defaults to <tt>$CORUS_HOME/db /&lt;instance_dir&gt;</tt>)</td>
          <td>Yes (requires server restart)</td>
        </tr>
        <tr>
          <td><tt>corus.server.uploads.dir</tt></td>
          <td>The directory where file uploads (that is, files deployed with the <tt>-f</tt> switch in the CLI) are kept. See the <a href="">File Uploads</a> section for details.</td>
          <td>No (defaults to (defaults to <tt>$CORUS_HOME/deploy /files/uploads/&lt;instance_dir&gt;</tt>)</td>
          <td>Yes (requires server restart)</td>
        </tr>
        <tr>
          <td><tt>corus.server.scripts.dir</tt></td>
          <td>The directory where deployed shell scripts (deployed with the <tt>-s</tt> switch in the CLI) are kept. See the <a href="">Shell Scripts</a> section for details.</td>
          <td>No (defaults to (defaults to <tt>$CORUS_HOME/deploy /files/scripts/&lt;instance_dir&gt;</tt>)</td>
          <td>Yes (requires server restart)</td>
        </tr>
        <tr>
          <td><tt>corus.process.start-at-boot.enabled</tt></td>
          <td>Indicates if a processes should be started automatically at Corus server boot time, provided these processes have an execution configuration that is flagged as startable on boot – i.e: the <tt>startOnBoot</tt> flag is set to <tt>true</tt>.</td>
          <td>No (defaults to <tt>true</tt>)</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.process.timeout</tt></td>
          <td>Delay(in seconds) after which processes that have not polled their Corus server  are considered stale.</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.process.check-interval</tt></td>
          <td>Interval(in seconds) at which the Corus server  checks for timed out processes.</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.process.kill-interval</tt></td>
          <td>Interval(in seconds) at which the Corus  server attempts killing a crashed process.</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.process.start-interval</tt></td>
          <td>Amount of time that Corus will wait for between process startups, when multiple processes are started at once by end-users.</td>
          <td>No (defaults to 15).</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.process.restart-interval</tt></td>
          <td>Amount of time (in seconds) a process must have been running for before it crashed and in order for an automatic restart to be authorized.</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>ubik.rmi.naming.mcast.address</tt> and <tt>ubik.rmi.naming.mcast.port</tt></td>
          <td>The values of these properties are by default made to correspond with the default values used by Ubik (the distributed computing framework on which Corus is based).</td>
          <td>Yes</td>
          <td>Yes (requires server restart)</td>
        </tr>
        <tr>
          <td><tt>ubik.rmi.address-pattern</tt></td>
          <td>
            A regexp specifying on which network address the Corus server should listen. It is preferrable to set that property if the host on which Corus is installed has more than one network interface. By default, Corus will listen on all network interfaces. It will also attempt to return as part of the remote stubs that it generates the first network address it finds that is not localhost – otherwise, localhost will be used.
          </td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.security.hostPattern.allow</tt> and <tt>corus.server.security.hostPattern.deny</tt></td>
          <td>
            Each property is expected to hold a comma-delimited list of patterns of IP addresses from which clients are either allowed or denied  connection, respectively.<br/><br/>
            Here are valid patterns:<br/><br/>
            <tt>
            192.168.*.*<br/>
            192.*.*.*<br/>
            192.**<br/>
            192.**.*<br/>
            </tt>
          </td>
          <td>No</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.server.log.max.file.size</tt></td>
          <td>
            The maximum size of the log files - value specified in bytes.
          </td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.syslog.protocol</tt></td>
          <td>
            The protocol to use to connect to the Syslog daemon -  value may be <tt>udp</tt>, <tt>tcp</tt>.
            <b>Note</b>: for Syslog integration to be activated, all properties under <tt>corus.servder.syslog.*</tt> must be set.
          </td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.syslog.host</tt></td>
          <td>The host of the Syslog daemon.</td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.syslog.port</tt></td>
          <td>The port of the Syslog daemon.</td>
          <td>No</td>
          <td>No</td>
        </tr>
        <tr>
          <td><tt>corus.server.alert.enabled</tt></td>
          <td>Indicates if email alerting should be enabled.</td>
          <td>No (defaults to false)</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.server.alert.smtp.host</tt></td>
          <td>The host of the SMTP relay to use to send alert emails.</td>
          <td>No (defaults to false)</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.server.alert.smtp.port</tt></td>
          <td>The port of the SMTP relay to use to send alert emails.</td>
          <td>No (defaults to 25)</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.server.alert.smtp.password</tt></td>
          <td>The SMTP password to use when connecting to the SMTP relay upon sending email alerts.</td>
          <td>No</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.server.alert.recipients</tt></td>
          <td>The semicolon-delimited list of recipient email addresses to use when sending alert emails.</td>
          <td>Yes</td>
          <td>Yes</td>
        </tr>
        <tr>
          <td><tt>corus.server.alert.sender</tt></td>
          <td>The email address that should appear in the “from" field when sending alert emails.</td>
          <td>Yes (if not specified, a default is built based on the host of the SMTP relay)</td>
          <td>Yes</td>
        </tr>
      </sapia:table>
    </sapia:sect2>
    <sapia:sect2 title="Remote Property Update" alias="remote_property_update">
      <p>
        Corus supports remotely updating server or process properties. In such cases, it is not the actual property files that are modified: rather, Corus adds/removes the properties to/from its internal database; if specified, the properties will override the corresponding ones in the file.
      </p>
      <p>
        The updates are performed using the Corus command line interface. The conf command allows adding, deleting, and listing either server or process properties. The command also supports updating so-called “tags" (explained in the next section). The syntax goes as follows:
      </p>
      <sapia:sect3 title="Adding Properties">
        <p>
          To add a property, or a list of properties:
        </p>
        <sapia:code>conf add -s s|p -p name1=value1[,name2=value2[,nameN=valueN[...]]</sapia:code>
        <p>
          Where:
        </p>
        <ul>
          <li><tt><b>s</b></tt> specifies the scope (indicating if the property is a server (s) or process (p) property – the scope defaults to process when not specified).</li>
          <li><tt><b>p</b></tt> consists of a comma-delimited list of name-value pairs corresponding to actual properties (there must be no space in the list for it to be parsed properly).</li>
        </ul>
      </sapia:sect3>
      <sapia:sect3 title="Listing Properties">
        <p>
          To list properties:
        </p>
        <sapia:code><![CDATA[conf ls [-p <name>] -s s|p]]></sapia:code>
        <p>
          Where:
        </p>
        <ul>
          <li><tt><b>p</b></tt> specifies a name or name pattern (using wildcards)</li>
          <li><tt><b>s</b></tt> specifies the scope (indicating if the property is a server (s) or process (p) property – the scope defaults to process when not specified).</li>
        </ul>
      </sapia:sect3>
      <sapia:sect3 title="Removing Properties">
        <p>
          To remove a property
        </p>
        <sapia:code><![CDATA[conf del -s s|p -p some.property
conf del -s s|p -p some.*]]></sapia:code>
        <p>
          Where:
        </p>
        <ul>
          <li><tt><b>s</b></tt> specifies the scope (indicating if the property is a server or process property)</li>
          <li><tt><b>p</b></tt> specifies the property to remove (may include wildcards corresponding to a property name pattern – in which case all matching properties will be removed</li>
        </ul>
        <sapia:note>
          For the properties with the “server" scope, the Corus instance might have to be restarted for the new values to be taken into account.
        </sapia:note>
      </sapia:sect3>
    </sapia:sect2>
    <sapia:sect2 title="Property Includes" alias="property_includes">
      <p>
        It may be convenient to share configuration properties across multiple Corus instances. This is possible through a mechanism dubbed “property includes".  How this works is very simple: you configure includes in the corus.properties file, as follows:
      </p>
      <sapia:code><![CDATA[
corus.server.properties.include.01=${user.home}/.corus/corus.properties 
corus.server.properties.include.02=/opt/corus/corus.properties:/etc/corus/corus.properties]]></sapia:code>
      
      <p>
        To configure includes, you have to follow the format below for property names:
      </p>
      <sapia:code>corus.server.properties.include.&lt;suffix&gt;</sapia:code>
      <p>
        This format allows configuring multiple includes on different lines. The suffix can be any string, but you should design them keeping in mind that Corus will evaluate includes based on the  sort order of their corresponding suffix. 
      </p>
      <p>
        On the right-hand side, the property value is expected to be a path composed of multiple segments, each pointing to a file to include, and where each segment is separated by either a colon (:) or semicolon (;).
      </p>
      <p>
        As you can see, property values may also contain variables in the following format:
      </p>
      <sapia:code>${&lt;name&gt;}</sapia:code>
      <p>
        Variables are expected to correspond to JVM properties (such as <tt>user.dir</tt>, <tt>user.home</tt>, etc.). Such variables are evaluated at Corus startup.
      </p>
    </sapia:sect2>
    <sapia:sect2 title="Home Directory Overrides">
        <p>
          Corus server properties files can be kept under the <tt>$HOME/.corus</tt> directory, where <tt>$HOME</tt> corresponds to the home directory of the user under which the Corus server is running. The following files will be automatically loaded at startup, and will override the ones found under <tt>$CORUS_HOME/config</tt>:
        </p>
        <sapia:code><![CDATA[$HOME/.corus/corus.properties
$HOME/.corus/corus_&lt;port&gt;.properties]]></sapia:code>
        <p>
          In the above &lt;port&gt; stands for the port of Corus instance to which the given properties are targeted.
        </p>
      </sapia:sect2>
    <sapia:sect2 title="Property Categories">
      <p>
        As of version 4.5, Corus supports so-called property “categories" - for process properties only. Property categories really allow grouping properties so that not necessarily all properties apply to all processes.
      </p>
      <p>
        To be clearer: when adding process properties to Corus, such properties are “global" by default, in the sense that they are passed to all processes at startup. This might not be the desired effect when deploying unrelated applications to the same Corus instances. In such cases, one may wish to isolate certain sets of properties  so that these are passed to only certain applications.
      </p>
      <p>
        The <tt>conf</tt> command supports assigning categories to properties. This is done through the <tt>-c</tt> option, as shown by the following example:
      </p>
      <sapia:code>conf add myapp.properties -c server-apps</sapia:code>
      <p>The <tt>-c</tt> option allows passing a comma-delimited list of categories (there must be no space between the categories):</p>
      <sapia:code>conf add myapp.properties -c server-apps,admin-apps</sapia:code>
      <p>
        Passing the right set of properties to given processes is specified through the Corus descriptor (<tt>corus.xml</tt>). To sum it up: 
        <ul>
          <li>Global process properties (those that are in the <tt>$CORUS_HOME/config/corus_process.properties</tt> file, and those stored in Corus with no category assigned to them) are always passed to all processes;</li>
          <li>the properties corresponding to the different categories are passed only if these categories are specified in the Corus descriptor, for the given distribution/process. Such properties will override global process properties with identical names).</li>
        </ul> 
      </p>
      <p>
        To better undersand the above, let's examine the following Corus descriptor sample:
      </p>
      <sapia:code><![CDATA[<distribution
	xmlns="http://www.sapia-oss.org/xsd/corus/distribution-5.0.xsd" 
	name="demo" 
	version="1.0" propertyCategories="myproduct" >
  <process name="myServer" 
           ...
           propertyCategories="server-apps">
    <port name="test" />
    ...
  </process>  
</distribution>]]></sapia:code>
      <p>
        The descriptor shows the <tt>propertyCategories</tt> attribute defined both on the <tt>&lt;distribution&gt;</tt> and on the <tt>&lt;process&gt;</tt> elements. Both support a comma-delimited list of property categories, for which order matters: for identically-named properties, the ones whose category came first will be overridden by the properties of subsequent categories.
      </p>
      <p>
        Furthermore, property categories defined at the <tt>&lt;process&gt;</tt> level will override those defined at the <tt>&lt;distribution&gt;</tt> level, for identically-named properties.
      </p>
      <p>
        The CLI's <tt>conf</tt> command allows viewing properties and their categories, as well adding/updating/deleting properties, taking categories into account – type <tt>man conf</tt> in the CLI for more details.
      </p>
      <p>
        In the end then, the set of properties passed to a process includes (in that order, which also is the order in which overriding is done):
      </p>
      <ul>
        <li>The properties that are created at startup by Corus for a given process (<tt>corus.process.id</tt>, <tt>corus.process.dir</tt>, etc.).</li>
        <li>The properties defined in the <tt>$CORUS_HOME/conf/corus_process.properties</tt>.</li>
        <li>The global process properties stored in Corus (those added with <tt>conf add</tt>, and not assigned to a category).</li>
        <li>The process properties corresponding to the categories specified at the <tt>&lt;distribution&gt;</tt> level (if any).</li>
        <li>The process properties corresponding to the categories specified at the <tt>&lt;process&gt;</tt> level (if any), for the currently starting process.</li>
      </ul>
    </sapia:sect2>
    <sapia:sect2 title="Dynamic Domain Change">
      <p>
        The domain of a Corus instance (or of a whole cluster) can be dynamically changed, without restarting Corus, either through the CLI or through the REST API. Here's an example using the CLI:
      </p>
      <sapia:code>cluster domain my-new-domain -cluster</sapia:code>
      <p>
        When the name of a Corus cluster is changed this way, Corus saves it in a file named <tt>.corus-readonly-&lt;corus-server-port&gt;.properties</tt>, under the <tt>$HOME/.corus</tt> directory (where <tt>$HOME</tt> corresponds to the home directory of the user under which the Corus server process runs, and  <tt>&lt;corus-server-port&gt;</tt> to the port of the current Corus instance).
      </p>
      <p>
        Corus always looks for the presence of that file at startup, and the properties it contains will supplement/override all other server properties.
      </p>
      <sapia:note>As its name implies, this file should not be manually edited by system administrators.</sapia:note>
    </sapia:sect2>
  </sapia:sect1>
</sapia:page>

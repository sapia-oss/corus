##### Property includes ###################################
#
# The include mechanism allows sharing configuration among
# different Corus instances: included properties can be kept
# in files that are shared over the network - and provided
# the drives containing these files are properly mounted
# into the OS.
#
# You may configure multiple property inclusion paths as 
# shown further below. There can be multiple paths per such 
# property (use either ; or : as separators). Also, note that
# includes must be specified using the 'corus.server.properties' 
# prefix in the property name, that they are sorted by property
# name, and processed in that order at runtime.
#
# The properties specified as includes are processed prior
# to the ones in this file. The properties in this file will
# override the ones specified as includes, if matching properties
# are found.

#corus.server.properties.include.01=${user.home}/.corus/corus.properties
#corus.server.properties.include.02=/opt/corus/corus.properties:/etc/corus/corus.properties

##### Corus address pattern ###############################
#
# If the Corus server host has more than one network 
# network interface, the following is used to indicate
# which network address to bind to, based on a regexp. 
# 
# The first address that matches the given regexp is used.
# Otherwise, if none matches, the Corus will listen on all
# addresses.
#
# Use either 'corus.server.address.pattern' or 'ubik.rmi.address-pattern'
# to indicate to which network interface to bind. 
#
#corus.server.address.pattern=\\d{3}\\.\\d{3}\\.\\d{3}\\.\\d{3}
#corus.server.address.pattern=10\\.10\\.\\d+\\.\\d+
#corus.server.address.pattern=192\\.168\\.\\d+\\.\\d+
#ubik.rmi.address-pattern=192\\.168\\.\\d+\\.\\d+

##### Corus random port range #############################
#
# Configures the range used for creating random ports (internally used
# for the clustering mechanism, where a separate server is created at
# each Corus node for the exchange of synchronization messages).
#
# The default range is pretty wide (from 1025 to 32000 inclusively): 
# change it as you see fit.
#
# If deploying in the cloud (for example AWS), you have to create a
# security policy that authorizes whatever range is being used,
# otherwise clustering will not work.
# 
#ubik.rmi.tcp.port-range=[1025-32000]

##### Corus domain ########################################
#
# This property defines the domain of this
# Corus server. The domain can also be set
# as part of the command-line, through the
# -d option.
#

#corus.server.domain=default

##### Ubik logging ########################################
#
#ubik.rmi.log.output.class=org.sapia.ubik.log.FileLogOutput
#ubik.rmi.log.file.name=corus-network
#ubik.rmi.log.file.max-archive=10
#ubik.rmi.log.file.dir=${corus.home}/logs

# Enabled this one only to see extensive report logs
#ubik.rmi.log.level.report.enabled=true

# Stats log
#ubik.rmi.stats.log.file.name=corus-network-stats
#ubik.rmi.stats.log.file.max-archive=10
#ubik.rmi.stats.log.file.dir=${corus.home}/logs
# (interval below is in seconds)
#ubik.rmi.stats.dump.interval=30

##### Corus port ##########################################
#
# This property defines the port of this
# Corus server. The port can also be set
# as part of the command-line, through the
# -p option. If none of these is set, the
# port defaults to 33000.
#
#corus.server.port=

##### Temp dir ############################################
#
# Directory where distributions are
# uploaded.
#

#corus.server.tmp.dir=${corus.home}/tmp

##### Deploy dir ##########################################
#
# Directory where distributions are
# extracted, and where processes are
# executed. 
#

#corus.server.deploy.dir=${corus.home}/deploy

##### Repo dir ############################################
#
# Directory where zipped distributions are
# kept.
#

#corus.server.repo.dir=${corus.home}/files/repo

##### Upload dir ##########################################
#
# Directory where arbitrary artifacts are
# uploaded.
#

#corus.server.uploads.dir=${corus.home}/files/uploads

##### Script dir ##########################################
#
# Directory where native shell scripts sare
# uploaded.
#

#corus.server.scripts.dir=${corus.home}/files/scripts

##### DB dir ##############################################
#
# Used to keep information held by
# Corus server instances between
# process restarts. 
#

#corus.server.db.dir=${corus.home}/db

##### Process auto-restart  ###############################
#
# If true, process auto-restart by Corus
# will be enabled. Otherwise, it will be 
# disabled (defaults to true). 
#
#corus.process.auto-restart=true

##### Process timeout #####################################
#
# Delay after which processes that 
# have not polled their Corus server 
# are considered "timed out".
#
# Delay is in seconds.
#

#corus.process.timeout=50

##### Process check interval ##############################
#
# Interval at which the Corus server 
# checks for timed out processes.
#
# Interval is in seconds.
#

#corus.process.check-interval=15

##### Process kill interval ###############################
#
# Interval between process kill attempts.
#
# Interval is in seconds.
#

#corus.process.kill-interval=15

##### Process start interval ##############################
#
# Amount of time to wait for between
# process startups
#
# Interval is in seconds.
#

#corus.process.start-interval=15

##### Process restart interval ############################
#
# Amount of time a process must have 
# been running for before it crashed 
# and in order for an automatic restart 
# to be authorized.
#
# Interval is in seconds.
#

#corus.process.restart-interval=300

##### Process boot startup ################################
#
# Indicates if a processes should be started
# automatically at Corus server boot time 
# (provided these processes have an execution
# configuration that is flagged as startable
# on boot).
#
# The functionality is enabled by default.
# If the Corus node is configured as a repo 
# server, it is recommended to disable this flag. 
#
# Note that if this property is set to false, and
# this Corus instance is configured as a repo client,
# this will have the effect of disabling automatic
# startup of processes upon a pull having completed 
# (that is, even in the case where the exec configs 
# holding referring to such processes have their 
# startOnBoot flag set to true).

#corus.process.start-at-boot.enabled=true

##### Process configuration update ########################
#
# Indicates if a processes should be notified of any process
# configuration that occured on the Corus server. When enabled
# Corus will publish configuration update events to all active
# managed processes. This functionality is activated by default.
#
# It is up to each process to take action upon reception of
# such a configuration change event. See Corus Interop specification
# for more details.
#

#corus.server.process.config-update.enabled=true

##### Multicast address and port ##########################
#
# Used for communication between Corus
# servers.
# (uses Ubik defaults - see
# http://www.sapia-oss.org/projects/ubik)
#
# Use either 'corus.server.multicast.address',
# corus.server.multicast.port, 'ubik.rmi.naming.mcast.address'
# 'ubik.rmi.naming.mcast.port'.
#
# The property values used below for multicast are
# the ones used by default.

#corus.server.multicast.address=231.173.5.7
#corus.server.multicast.port=5454
#ubik.rmi.naming.mcast.address=231.173.5.7
#ubik.rmi.naming.mcast.address=5454

##### Avis ################################################
#
# Use in place of IP multicast, if you deem it more
# appropriate, or in cases where IP multicast is not
# supported.
# 
# The following will enable use of Avis for broacast
# communications. Make sure you set the Avis URL
# according to your setup.
#
# If using Avis support, comment out the IP multicast
# properties above.
#
#ubik.rmi.naming.broadcast.provider=ubik.rmi.naming.broadcast.avis
#ubik.rmi.naming.broadcast.avis.url=elvin://localhost

##### Host filtering ######################################
#
# Used to authorize given hosts to connect
# to the Corus server. Must be given as
# comma-delimited list of host patterns. If
# ommitted, any host can connect to the 
# server.
#
# Specified allow hosts are given access
# and deny hosts are forbidden. By default
# no filtering is applied and all requests
# are accepted. The reserved word 'localhost'
# can be used to specify the current host.
#

#corus.server.security.hostPattern.allow=
#corus.server.security.hostPattern.deny=

##### File log #############################################
#
# File logging configuration
# is redirected to syslogd
#
# Define the maximum log file size in bytes (default 100MB)
#corus.server.log.max.file.size=102400000

##### Sys log #############################################
#
# Syslog configuration: all corus logging
# is redirected to syslogd
#
#
#corus.server.syslog.protocol=udp
#corus.server.syslog.host=localhost
#corus.server.syslog.port=5555

##### Alerts ##############################################
#
# Specifies if alerting should be enabled or not
# (false by default). Set to true to enable.
#
# corus.server.alert.enabled=true
#   
# Specifies the SMTP host (defaults to localhost)
#
# corus.server.alert.smtp.host=
#
# Specifies the SMTP port (defaults to 25)
#
# corus.server.alert.smtp.port=
#
# Specifies the SMTP password (none will be used 
# if not specified)
#
# corus.server.alert.smtp.password=
#
# The semicolon-separated list of emails of the 
# alert recipients. Example:
# mike@bigco.com;alerts@bigco.com;bigboss@bigco.com
#
# If not specified, no emails will be sent.
#
# corus.server.alert.recipients=
#
# The email address to use as the sender in the
# emails that are sent (example: corus-no-reply@bigco.com).
# If not specified a default one is used.
# 
# corus.server.alert.sender=
#
# The minimum level for alerts to be sent. Supported
# levels are (from least to most important): 
# INFO, WARNING, ERROR, FATAL
# Not that this config is case-insensitive (defaults to warning)
#
# corus.server.alert.level=warning
#

##### Diagnostic ##########################################
#
# Minimum number of seconds to allow for processes to start 
# when a new deployment is done. Defaults to 60 seconds.
#
# corus.server.diagnostic.grace-period.duration=60
#

##### Repository ##########################################
#
# Determines what the type of repository node that
# this Corus instance will be. Can be one of the 
# following (defaults to none):
#
# - none: means that this Corus node will be neither 
#         a repository client, nor a repository server.
#         (i.e.: it will not be involved in repository
#         operations at all). This in fact disables any 
#         repository functionality.
#
# - client: means that this Corus node will act as a
#         repository client.
# 
# - server: means that this Corus node will act as a
#         repository server.
#
#corus.server.repository.node.type=none
#
# The time-to-live (in minutes) of files that are temporarily cached locally
# by the repository. Such files are automatically deleted beyond that TTL
# (defaults to 60 minutes).
#corus.server.repository.files.ttl=60
#
# The interval (in seconds) at which file (distributions, images, etc.) cached
# locally by the repository should be checked for deletion (defaults to 120 seconds).
#corus.server.repository.files.check-interval=120
#
#
# Specifies the maximum number of concurrent deployment 
# requests that a repository should process (any more are queued
# up - defaults to 5).
#
#corus.server.repository.max.concurrent-deployments=5
#
# The number of times a client repo node should try to discover
# potential server repos at startup and pull their distributions
# (defaults to 4).
# 
#corus.server.repository.dist.disco.max-attempts=4
#
# The time interval (in seconds) to wait for in between 
# repo server discovery attempts (30 seconds by default).
#
#corus.server.repository.dist.disco.interval=30
#
# Enables (true) or disables (false) the push of tags by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
#corus.server.repository.tags.push.enabled=true
#
# Enables (true) or disables (false) the pull of tags by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
#corus.server.repository.tags.pull.enabled=true
#
# Enables (true) or disables (false) the push of properties by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
#corus.server.repository.properties.push.enabled=true
#
# Enables (true) or disables (false) the pull of properties by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
#corus.server.repository.properties.pull.enabled=true
#
# Enables (true) or disables (false) the push of file uploads by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
#corus.server.repository.uploads.push.enabled=true
#
# Enables (true) or disables (false) the pull of file uploads by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
#corus.server.repository.uploads.pull.enabled=true
#
# Enables (true) or disables (false) the push of shell scripts by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
#corus.server.repository.scripts.push.enabled=true
#
# Enables (true) or disables (false) the pull of shell scripts by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
#corus.server.repository.scripts.pull.enabled=true
#
# Enables (true) or disables (false) the push of port ranges by
# this Corus instance if it is configured as a repo server
# (defaults to true).
#
#corus.server.repository.port-ranges.push.enabled=true
#
# Enables (true) or disables (false) the pull of port ranges by
# this Corus instance if it is configured as a repo client
# (defaults to true).
#
#corus.server.repository.port-ranges.pull.enabled=true
#
# Enables (true) or disables (false) the push of security
# configuration (roles, application keys) by this Corus instance 
# if it is configured as a repo server (defaults to true).
#
#corus.server.repository.security.push.enabled=true
#
# Enables (true) or disables (false) the pull of security
# configuration (roles, application keys) by this Corus instance 
# if it is configured as a repo client (defaults to true).
#
#corus.server.repository.security.pull.enabled=true

##### Symbolic Links ######################################
#
# Used by the file system extension of the
# http console to be able to view other
# directories in addition to $CORUS_HOME.
# 
# A symbolic link is define by the following:
#   corus.server.file.link.[link_name]=[dir_path]
#
#corus.server.file.link.app-logs=/var/log/myApp
#
# Enables (true) or disables (false) the pull of security
# configuration (roles, application keys) by this Corus instance 
# if it is configured as a repo client (defaults to true).
#

##### SSL #################################################
#
# SSL key password
#
#corus.server.ssl.key.password=
#
# SSL keystore password
#
#corus.server.ssl.keystore.password=
#
# Path to SSL keystore file
#
#corus.server.ssl.keystore.file=${user.home}/.keystore
#
# SSL PORT (if set to 0, will be set to corus_non_ssl_port + 443)
#
#corus.server.ssl.port=0
#
# Enables/disables SSL (defaults to false)
#
#corus.server.ssl.enabled=
#
# Restricts REST API access to SSL (defaults to false).
#
#corus.server.api.ssl.enforced=false
#
# Enforces authentication for all REST API resources - 
# even for GET resources (defaults to false). 
#
#corus.server.api.auth.required=false

##### File Access #########################################
#
# Allows determining file access from the Corus console.
# Takes a comma-delimited list of patterns that specify
# which files to hide (and whose access should be denied).
#
#corus.server.file.hide.patterns=${corus.home}/logs/*audit*log.*,${corus.home}/db/**,${corus.home}/config/*.properties,${corus.home}/config/files/uploads/*.properties,${corus.home}/deploy/**/.corus-process.hidden.properties

##### Consul ##############################################
#
# Enables/Disables publishing this node's info to Consul.
# Defaults to false.
#
#corus.server.pub.consul.enabled=false
#
# Base URL of the Consul agent
#
#corus.server.pub.consul.agent-url=http://localhost:8500
#
# The interval (in seconds) at which publishing to Consul should be done. 
# Defaults to 30.
#
#corus.server.pub.consul.interval=30
#
# The TTL (in seconds) of the service definition published in Consul 
# for this Corus node. Should be set to a value greater than the publishing
# interval. Defaults to 45.
#
#corus.server.pub.consul.ttl=45
#

##### AWS #################################################
#
# Enables/disables AWS integration
#corus.server.aws.enabled=false


##### NUMA ##############################################
#
# Enables/disables NUMA integration (defaults to false)
#corus.server.numa.enabled=false

# Enables/disables auto detection of NUMA node count (defaults to true)
#corus.server.numa.auto-detection.enabled=true

# Enables/disables binding of processes to CPUs of numa node (defaults to true)
#corus.server.numa.bind.cpu=true

# Enables/disables binding of processes to memory slot of numa node (defaults to true)
#corus.server.numa.bind.memory=true

# Defines the fist numa node to use for process binding (defaults to 0)
#corus.server.numa.first.node.id=0

# Defines the total number of numa node available on the current server to override the auto-detection (defaults to 0)
#corus.server.numa.node.count=0


##### Docker ##############################################
#
# Enables/disables Docker integration
# (defaults to false)
#corus.server.docker.enabled=false

# Enables/disables synchronization with the Docker registry
# (defaults to true)
# corus.server.docker.registry.sync-enabled=true

# Enables/disables auto-removal of images upon undeployment
# of Docker-enabled distributions (defaults to true)
# corus.server.docker.image-auto-remove-enabled=true

# Email to use for authentication against the Docker registry
#corus.server.docker.client.email=

# Username to use for authentication against the Docker registry
#corus.server.docker.client.username=

# Password to use for authentication against the Docker registry
#corus.server.docker.client.password=

# Address of the Docker registry to use, down to the version
#corus.server.docker.registry.address=https://hub.docker.com/v1/

# Path to the Docker certificates
#corus.server.docker.certificates.path=
